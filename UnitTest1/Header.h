#pragma once
#include "stdafx.h"
#include "iostream"
#include "fstream"
#include <string>

using namespace std;

//int NOD(int a, int b);

class shape
{
public:
	// ?????????????, ?????????? ? ???? ??????? ?? ??????
	static shape* In(ifstream &ReadFile);				//??? ????? ??????????? ??-??

	virtual void InData(ifstream &ReadFile) = 0;					// ???? ? ?????? ???? ???????
	virtual void Out(ofstream &WriteFile) = 0;		// ????? ? ?????? ???? ???????
	virtual void OutOnlyRectangle(ofstream &WriteFile);
	virtual float Perimeter() = 0;
protected:
	shape() {};
};

class Node
{
public:
	shape *info;
	Node *next;
};

class container
{
	enum { max_len = 100 }; // максимальная длина
	int len; // текущая длина
	shape *cont[max_len];
public:

	void In(ifstream &ReadFile);	//???? ??????
	void Out(ofstream &WriteFile);	//????? ??????
	void Clear();				//??????? ??????????
	void Sorting();
	void FiltredOut(ofstream &WriteFile);
	container();				//????????????? ??????????
	~container() { Clear(); };
private:
	Node *head;
	//int len;			//???-?? ?????????
};


class rectangle : public shape
{
private:

public:
	int x, y;
	char colour[10];
	float density;
	void InData(ifstream &ReadFile); // ????
	void Out(ofstream &WriteFile); // ?????
	void OutOnlyRectangle(ofstream &WriteFile);
	float Perimeter();
	rectangle() {} 
};

class circle : public shape {
private:

public:
	int x, y, R;
	char colour[10];
	float density;

	void InData(ifstream &ReadFile); 
	void Out(ofstream &WriteFile); 
	float Perimeter();
	circle() {} // 
};

class triangle : public shape
{
private:

public:
	int a, b, c;
	char colour[10];
	float density;
	void InData(ifstream &ReadFile); // ????
	void Out(ofstream &WriteFile); // ?????
	float Perimeter();
	triangle() {} // ???????? ??? ?????????????.
};